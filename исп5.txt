using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication3

{
    public enum TypeDogovera
    {
        Debet,
        Deposit,
        Kredit
    }
    public  class Account 
    {
        
        static int idDefault = 0;
        protected int col_days_openAccount = 0; 

        public Account(decimal sum, int procent)
        {
            Sum = sum;
            Percentage = procent;
            Id = ++idDefault;
        }
        
        public decimal Sum { get; private set; }        
        public int Percentage { get; private set; }
        public int Id { get; private set; }       

        public virtual void PutMonney(decimal sum)
        {            
            Sum += sum;
            Console.WriteLine("На счет поступило " + sum +"итог"+Sum);           
        }        
        public virtual decimal GetMonney(decimal sum)
        {
            decimal result = 0;
            if (Sum >= sum)
            {
                Sum -= sum;
                result = Sum;
                Console.WriteLine("Сумма снята со счета"+" "+Id +" остаток "+Sum);
            }
            else
            {
                Console.WriteLine("Недостаточно средств" + " " +"id= "+ Id + " "+Sum);
            }
            return result;
        }
        protected internal void Incrementcol_Days_OpenAccount()
        {
            col_days_openAccount++;
        }
        protected internal int printDate()
        {
            return col_days_openAccount;
        }

        protected internal virtual void Open()
        {
            Console.WriteLine($"Открыт новый счет! Id счета : {Id}", Sum);
        
        }      
        protected internal virtual void Calculate()
        {
            decimal increment = Sum * Percentage / 100;
            Sum = Sum + increment;
            Console.WriteLine($"Начислены проценты в размере: {increment}", increment);           
        }    
}

    public class KreditAccount : Account
    {
        public KreditAccount(decimal sum, int procent) : base(sum, procent)
        {
        }
        protected internal override void Open()
        {
            Console.WriteLine($"Открыт новый кредитный счет! Id счета : {this.Id}"+" Остаток долга =  "+ this.Sum);

        }

        public override void PutMonney(decimal sum)
        {
            if (col_days_openAccount > 30)
            {              
                base.PutMonney(-sum);
            }
            else
                Console.WriteLine("На счет можно положить только после 30-ти дневного периода " + Id);
        }
        public override decimal GetMonney(decimal sum)
        {            
                return base.GetMonney(-sum);
                Console.WriteLine("Остаток долга на кредитном счете id= " + this.Id + " составил " + this.Sum );            
        }
        protected internal override void Calculate()
        {
            if (col_days_openAccount > 30)
                base.Calculate();
        }
    }
    public class DemandAccount : Account
    {
        public DemandAccount(decimal sum, int procent) : base(sum, procent)
        {
        }

        protected internal override void Open()
        {
            Console.WriteLine($"Открыт новый счет дебетовый! Id счета: {this.Id}", this.Sum);
        }
        protected internal override void Calculate()
        {
            if (col_days_openAccount % 30==0)
                base.Calculate();
        }
      
    }

    public class DepositAccount : Account
    {
        public DepositAccount(decimal sum, int procent) : base(sum, procent)
        {
        }
        protected internal override void Open()
        {
            Console.WriteLine($"Открыт новый депозитный счет! Id счета: {this.Id}", this.Sum);
        }

        public override void PutMonney(decimal sum)
        {
            if (col_days_openAccount % 30 == 0)
            {
                base.PutMonney(sum);
            }
            else
                Console.WriteLine("На счет можно положить только после 30-ти дневного периода " + Id);
        }

        public override decimal GetMonney(decimal sum)
        {
            if (col_days_openAccount % 30 == 0)
                return base.GetMonney(sum);
            else
                Console.WriteLine("Вывести средства можно только после 30-ти дневного периода "+ Id+" итог " +this.Sum);
            return 0;
        }

        protected internal override void Calculate()
        {
            if (col_days_openAccount % 30 == 0)
                base.Calculate();
        }
    }

    public class Bank<T> where T : Account
    {
        T[] accounts;

        public string Name { get; private set; }

        public Bank(string name)
        {
            this.Name = name;
        }
        
        public void Open(TypeDogovera TypeDogovera, decimal sum)
        {
            T newAccount = null;            
            switch (TypeDogovera)
            {
                case TypeDogovera.Debet:
                    newAccount = new DemandAccount(sum, 1) as T;
                    break;
                case TypeDogovera.Deposit:
                    newAccount = new DepositAccount(sum, 40) as T;
                    break;
                case TypeDogovera.Kredit:
                    newAccount = new KreditAccount(sum, 2) as T;
                    break;
            }

            if (newAccount == null)
                throw new Exception("Ошибка создания счета");                
            if (accounts == null)
                accounts = new T[] { newAccount };
            else
            {
                T[] tempAccounts = new T[accounts.Length + 1];
                for (int i = 0; i < accounts.Length; i++)
                    tempAccounts[i] = accounts[i];
                tempAccounts[tempAccounts.Length - 1] = newAccount;
                accounts = tempAccounts;
            }  

            newAccount.Open();
        }
        
        public void PutMonney(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Счет не найден");
            account.PutMonney(sum);
        }
      
        public void GetMonney(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Счет не найден");
            account.GetMonney(sum);
        }
        
        public void Close(int id)
        {
            
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Счет не найден");
           
            if (accounts.Length <= 1)
                accounts = null;
            else
            {                
                T[] tempAccounts = new T[accounts.Length - 1];
                for (int i = 0, j = 0; i < accounts.Length; i++)
                {
                    if (i != id)
                        tempAccounts[j++] = accounts[i];
                }
                accounts = tempAccounts;
            }
        }

      
        public void CalculatePercentage()
        {
            if (accounts == null)
                return;
            for (int i = 0; i < accounts.Length; i++)
            {
                accounts[i].Incrementcol_Days_OpenAccount();
                accounts[i].Calculate();
            }
        }
        
        public T FindAccount(int id)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
                if (accounts[i].Id == id)
                    return accounts[i];
            }
            return null;
        }

        public void FindAccountover(int id)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
             
                if (accounts[i].Id == id)
                    Console.WriteLine("Остаток " + accounts[i].Sum + " Номер счета " + accounts[i].Id+" Срок использования счета " + accounts[i].printDate());
            }
            
        }

    }

    class Program
    {

        static void Main(string[] args)

        {
            Bank<Account> bank = new Bank<Account>("mtbank");
            bool alive = true;
            while (alive)
            {                
                Console.WriteLine("1. Открыть счет");
                Console.WriteLine("2. Снять деньги");
                Console.WriteLine("3. Положить деньги");
                Console.WriteLine("4. Закрыть счет ");
                Console.WriteLine("5. День-");
                Console.WriteLine("6.Информация о счете");
                Console.WriteLine("7.Выйти из программы");
                Console.WriteLine("Введите номер пункта:");                
                try
                {
                    int command = Convert.ToInt32(Console.ReadLine());
                    switch (command)
                    {
                        case 1:
                            OpenAccount(bank);
                            break;
                        case 2:
                            Getmonney(bank);
                            break;
                        case 3:
                            PutMonney(bank);
                            break;
                        case 4:
                            CloseAccount(bank);
                            break;
                        case 5:
                            break;
                        case 6:
                            Find(bank);
                            break;
                        case 7:
                            alive = false;
                             continue;
                    }
                    bank.CalculatePercentage();
                }
                catch (Exception ex)
                {                   
                    Console.WriteLine(ex.Message);                   
                }
            }
        }

        private static void OpenAccount(Bank<Account> bank)
        {
            Console.WriteLine("Введите сумму для создания счета:");

            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("Выберите тип счета: 1. Дебетовый 2. Депозит 3.Кредит");
            TypeDogovera TypeDogovera;

            int type = Convert.ToInt32(Console.ReadLine());

            if (type == 2)
                TypeDogovera = TypeDogovera.Deposit;
            else
                if(type==1)
                TypeDogovera = TypeDogovera.Debet;
            else
                TypeDogovera = TypeDogovera.Kredit;
            bank.Open(TypeDogovera, sum);               
               
        }

     
        private static void Getmonney(Bank<Account> bank)
        {
            Console.WriteLine("Укажите сумму для вывода со счета:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("Введите id счета:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.GetMonney(sum, id);
        }

        private static void PutMonney(Bank<Account> bank)
        {
            Console.WriteLine("Укажите сумму, чтобы положить на счет:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("Введите Id счета:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.PutMonney(sum, id);
        }
        private static void Find(Bank<Account> bank)
        {
            Console.WriteLine("Введите Id счета:");
            bank.FindAccountover(Convert.ToInt32(Console.ReadLine()));
            
        }
        private static void CloseAccount(Bank<Account> bank)
        {
            Console.WriteLine("Введите id счета, который надо закрыть:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.Close(id);
        }
       
      
    }

}

