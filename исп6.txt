using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication3

{

    interface IComparer
    {
        int Compare(object o1, object o2);
    }


    public enum TypeDogovera
    {
        Debet,
        Deposit,
        Kredit
    }
    
    abstract public class Account
    {

        static int idDefault = 0;
        protected int col_days_openAccount = 0;

        public Account(decimal sum, int procent)
        {
            Sum = sum;
            Percentage = procent;
            Id = ++idDefault;
        }

        public decimal Sum { get; private set; }
        public int Percentage { get; private set; }
        public int Id { get; private set; }

        public virtual void PutMonney(decimal sum)
        {
            Sum += sum;
            Console.WriteLine("Putinng into account " + sum + "value " + Sum);
        }
        
        public virtual decimal GetMonney(decimal sum)
        {
            decimal result = 0;
            if (Sum >= sum)
            {
                Sum -= sum;
                result = Sum;
                Console.WriteLine("Get into account" + " " + Id + " остаток " + Sum);
            }
            else
            {
                Console.WriteLine("Enof monney" + " " + "id= " + Id + " " + Sum);
            }
            return result;
            
        }
        
        protected internal void Incrementcol_Days_OpenAccount()
        {
            col_days_openAccount++;
        }
        protected internal int printDate()
        {
            return col_days_openAccount;
        }

        protected internal virtual void Open()
        {
            Console.WriteLine($"Open new account! Id account : {Id}", Sum);

        }
        
        protected internal virtual void Calculate()
        {
            decimal increment = Sum * Percentage / 100;
            Sum = Sum + increment;
            Console.WriteLine($"Put  Percentage: {increment}", increment);
        }
    }


    public class KreditAccount : Account
    {
        public KreditAccount(decimal sum, int procent) : base(sum, procent)
        {
        }
        protected internal override void Open()
        {
            Console.WriteLine($"Open new Credit account! Id account : {this.Id}" + " Ostatok =  " + this.Sum);

        }

        public override void PutMonney(decimal sum)
        {
            if (col_days_openAccount > 30)
            {
                base.PutMonney(-sum);
            }
            else
                Console.WriteLine("In account put monney after 30 days " + Id);
        }
        
        public override decimal GetMonney(decimal sum)
        {
            return base.GetMonney(-sum);
            Console.WriteLine("ost dolg in credit account id= " + this.Id + " value " + this.Sum);
        }
        
        protected internal override void Calculate()
        {
            if (col_days_openAccount > 30)
                base.Calculate();
        }
    }

    public class DemandAccount : Account
    {
        public DemandAccount(decimal sum, int procent) : base(sum, procent)
        {
        }

        protected internal override void Open()
        {
            Console.WriteLine($"Open new debet account Id account: {this.Id}", this.Sum);
        }
        protected internal override void Calculate()
        {
            if (col_days_openAccount % 30 == 0)
                base.Calculate();
        }

    }

    public class DepositAccount : Account
    {
        public DepositAccount(decimal sum, int procent) : base(sum, procent)
        {
        }
        protected internal override void Open()
        {
            Console.WriteLine($"open new deposit account! Id account: {this.Id}", this.Sum);
        }

        public override void PutMonney(decimal sum)
        {
            if (col_days_openAccount % 30 == 0)
            {
                base.PutMonney(sum);
            }
            else
                Console.WriteLine("in account put monney after 30 days " + Id);
        }

        public override decimal GetMonney(decimal sum)
        {
            if (col_days_openAccount % 30 == 0)
                return base.GetMonney(sum);
            else
                Console.WriteLine("Getting monney after 30 days " + Id + " value " + this.Sum);
            return 0;
        }

        protected internal override void Calculate()
        {
            if (col_days_openAccount % 30 == 0)
                base.Calculate();
        }
    }

    class AccountComparerBySum : IComparer<Account>
    {
        public int Compare(Account p1, Account p2)
        {
            if (p1.Sum > p2.Sum)
                return 1;
            else if (p1.Sum < p2.Sum)
                return -1;
            else
                return 0;
        }
    }

    class AccountComparerById : IComparer<Account>
    {
        public int Compare(Account p1, Account p2)
        {
            if (p1.Id > p2.Id)
                return 1;
            else if (p1.Id < p2.Id)
                return -1;
            else
                return 0;
        }
    }

    public class Bank<T> where T : Account
    {
        T[] accounts;

        public string Name { get; private set; }

        public Bank(string name)
        {
            this.Name = name;
        }

        public void Open(TypeDogovera TypeDogovera, decimal sum)
        {
            T newAccount = null;
            switch (TypeDogovera)
            {
                case TypeDogovera.Debet:
                    newAccount = new DemandAccount(sum, 1) as T;
                    break;
                case TypeDogovera.Deposit:
                    newAccount = new DepositAccount(sum, 40) as T;
                    break;
                case TypeDogovera.Kredit:
                    newAccount = new KreditAccount(sum, 2) as T;
                    break;
            }

            if (newAccount == null)
                throw new Exception("Error open account");
            if (accounts == null)
                accounts = new T[] { newAccount };
            else
            {
                T[] tempAccounts = new T[accounts.Length + 1];
                for (int i = 0; i < accounts.Length; i++)
                    tempAccounts[i] = accounts[i];
                tempAccounts[tempAccounts.Length - 1] = newAccount;
                accounts = tempAccounts;
            }

            newAccount.Open();
        }

        public void PutMonney(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Dosent exist this account");
            account.PutMonney(sum);
        }

        public void GetMonney(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Dosent exist this account");
            account.GetMonney(sum);
        }

        public void Close(int id)
        {

            T account = FindAccount(id);
            if (account == null)
                throw new Exception("Dosent exist this account");

            if (accounts.Length <= 1)
                accounts = null;
            else
            {
                T[] tempAccounts = new T[accounts.Length - 1];
                for (int i = 0, j = 0; i < accounts.Length; i++)
                {
                    if (i != id)
                        tempAccounts[j++] = accounts[i];
                }
                accounts = tempAccounts;
            }
        }

        public void CalculatePercentage()
        {
            if (accounts == null)
                return;
            for (int i = 0; i < accounts.Length; i++)
            {
                accounts[i].Incrementcol_Days_OpenAccount();
                accounts[i].Calculate();
            }
        }

        public T FindAccount(int id)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
                if (accounts[i].Id == id)
                    return accounts[i];
            }
            return null;
        }

        public void FindAccountover(int id)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
                if (accounts[i].Id == id)
                    Console.WriteLine("Value " + accounts[i].Sum + " Id account " + accounts[i].Id + " isp " + accounts[i].printDate());
            }

        }

        public void SortByComparer()
        {
            Console.WriteLine("1-sord by value");
            Console.WriteLine("1-sort by id");
            Console.WriteLine("chose your act ");
            int command = Convert.ToInt32(Console.ReadLine());
            switch (command)
            {
                case 1:
                    Array.Sort(accounts, new AccountComparerBySum());
                    for (int i = 0; i < accounts.Length; i++)
                    {
                        Console.WriteLine("value " + accounts[i].Sum + " id " + accounts[i].Id + " isp " + accounts[i].printDate());
                    }
                    break;
                case 2:
                    Array.Sort(accounts, new AccountComparerById());
                    for (int i = 0; i < accounts.Length; i++)
                    {
                        Console.WriteLine("value " + accounts[i].Sum + " id " + accounts[i].Id + " isp " + accounts[i].printDate());
                    }
                    break;
            }

        }

    }


    class Program
    {
        static void Main(string[] args)

        {
            Bank<Account> bank = new Bank<Account>("mtbank");
            bool alive = true;
            while (alive)
            {
                Console.WriteLine("1.open");
                Console.WriteLine("2.Get monney");
                Console.WriteLine("3.Put monney");
                Console.WriteLine("4.Close account ");
                Console.WriteLine("5.Days-");
                Console.WriteLine("6.Info");
                Console.WriteLine("7.sort by value");
                Console.WriteLine("8.Exit");
                Console.WriteLine("Chose your act:");
                try
                {
                    int command = Convert.ToInt32(Console.ReadLine());
                    switch (command)
                    {
                        case 1:
                            OpenAccount(bank);
                            break;
                        case 2:
                            Getmonney(bank);
                            break;
                        case 3:
                            PutMonney(bank);
                            break;
                        case 4:
                            CloseAccount(bank);
                            break;
                        case 5:
                            break;
                        case 6:
                            Find(bank);
                            break;
                        case 7:
                            SortByComparer(bank);
                            break;
                        case 8:
                            alive = false;
                            continue;
                    }
                    bank.CalculatePercentage();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private static void OpenAccount(Bank<Account> bank)
        {
            Console.WriteLine("write summ and cost:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("Chose act: 1. deb 2. depos 3.kred");
            TypeDogovera TypeDogovera;
            int type = Convert.ToInt32(Console.ReadLine());

            if (type == 2)
                TypeDogovera = TypeDogovera.Deposit;
            else
                if (type == 1)
                TypeDogovera = TypeDogovera.Debet;
            else
                TypeDogovera = TypeDogovera.Kredit;
            bank.Open(TypeDogovera, sum);
        }


        private static void Getmonney(Bank<Account> bank)
        {
            Console.WriteLine("Chose summ :");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("write id account:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.GetMonney(sum, id);
        }

        private static void PutMonney(Bank<Account> bank)
        {
            Console.WriteLine("summ, :");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("Chose Id account:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.PutMonney(sum, id);
        }
        
        private static void SortByComparer(Bank<Account> bank)
        {
            Console.WriteLine("sortinf finished");
            bank.SortByComparer();
        }
        
        private static void Find(Bank<Account> bank)
        {
            Console.WriteLine("chose Id account:");
            bank.FindAccountover(Convert.ToInt32(Console.ReadLine()));

        }
        
        private static void CloseAccount(Bank<Account> bank)
        {
            Console.WriteLine("chose id account:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.Close(id);
        }

    }

}

