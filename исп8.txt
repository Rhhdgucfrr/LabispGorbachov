
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication3

{
    public enum Tepe
    {
        Ordinary,
        Deposit
    }
    
    public class Bank<T> where T : Account
    {
        T[] accounts;

        public string Name { get; private set; }

        public Bank(string name)
        {
            this.Name = name;
        }   
        
        public void Open(Tepe Tepe, decimal sum,
            StateAccHand addSumHandler, StateAccHand withdrawSumHandler,
            StateAccHand calculationHandler, StateAccHand closeAccountHandler,
            StateAccHand openAccountHandler)
        {
            T newAccount = null;

            switch (Tepe)
            {
                case Tepe.Ordinary:
                    newAccount = new DemandAccount(sum, 1) as T;
                    break;
                case Tepe.Deposit:
                    newAccount = new DepositAccount(sum, 40) as T;
                    break;
            }

            if (newAccount == null)
                throw new Exception("error open acc");                 
            if (accounts == null)
                accounts = new T[] { newAccount };
            else
            {
                T[] tempAccounts = new T[accounts.Length + 1];
                for (int i = 0; i < accounts.Length; i++)
                    tempAccounts[i] = accounts[i];
                tempAccounts[tempAccounts.Length - 1] = newAccount;
                accounts = tempAccounts;
            }
            
            newAccount.Added += addSumHandler;
            newAccount.Withdrawed += withdrawSumHandler;
            newAccount.Closed += closeAccountHandler;
            newAccount.Opened += openAccountHandler;
            newAccount.Calculated += calculationHandler;
            newAccount.Open();
        }        
        
        public void Put(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("error");
            account.PutMonney(sum);
        }
        
        public void Getting(decimal sum, int id)
        {
            T account = FindAccount(id);
            if (account == null)
                throw new Exception("error");
            account.GetMonney(sum);
        }
        
        public void Close(int id)
        {
            int index;
            T account = FindAccount(id, out index);
            if (account == null)
                throw new Exception("error");

            account.Close();

            if (accounts.Length <= 1)
                accounts = null;
            else
            {                
                T[] tempAccounts = new T[accounts.Length - 1];
                for (int i = 0, j = 0; i < accounts.Length; i++)
                {
                    if (i != index)
                        tempAccounts[j++] = accounts[i];
                }
                accounts = tempAccounts;
            }
        }
        
        public void CalculatePercentage()
        {
            if (accounts == null) 
                return;
            for (int i = 0; i < accounts.Length; i++)
            {
                accounts[i].IncrementDays();
                accounts[i].Calculate();
            }
        }    
        
        public T FindAccount(int id)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
                if (accounts[i].Id == id)
                    return accounts[i];
            }
            return null;
        }
        
        public T FindAccount(int id, out int index)
        {
            for (int i = 0; i < accounts.Length; i++)
            {
                if (accounts[i].Id == id)
                {
                    index = i;
                    return accounts[i];
                }
            }
            index = -1;
            return null;
        }
    }
    
    public delegate void StateAccHand(object sender, AccountEvent e);
    
    public class AccountEvent
    {
        public string Message { get; private set; }
        public decimal Sum { get; private set; }
        public AccountEvent(string _mes, decimal _sum)
        {
            Message = _mes;
            Sum = _sum;
        }
    }
    
    public class DemandAccount : Account
    {
        public DemandAccount(decimal sum, int percentage) : base(sum, percentage) { }

        protected internal override void Open()
        {
            base.OnOpened(new AccountEvent($"open new acc! Id счета: {this.Id}", this.Sum));
        }
    }
    
    public class DepositAccount : Account
    {
    
        public DepositAccount(decimal sum, int percentage) : base(sum, percentage)
        {
        }
        
        protected internal override void Open()
        {
            base.OnOpened(new AccountEvent($"apen new acc! Id счета: {this.Id}", this.Sum));
        }

        public override void PutMonney(decimal sum)
        {
            if (_days % 30 == 0)
                base.PutMonney(sum);
            else
                base.OnAdded(new AccountEvent("sorry 30 days" , 0));
        }

        public override decimal GetMonney(decimal sum)
        {
            if (_days % 30 == 0)
                return base.GetMonney(sum);
            else
                base.OnWithdrawed(new AccountEvent("sorry 30 days", 0));
            return 0;
        }

        protected internal override void Calculate()
        {
            if (_days % 30 == 0)
                base.Calculate();
        }
    }
    public abstract class Account : IAC
    {
        protected internal event StateAccHand Withdrawed;
        protected internal event StateAccHand Added;
        protected internal event StateAccHand Opened;
        protected internal event StateAccHand Closed;
        protected internal event StateAccHand Calculated;

        static int counter = 0;
        protected int _days = 0;

        public Account(decimal sum, int percentage)
        {
            Sum = sum;
            Percentage = percentage;
            Id = ++counter;
        }
        
        public decimal Sum { get; private set; }
        
        public int Percentage { get; private set; }
        
        public int Id { get; private set; }
        
        private void CallEvent(AccountEvent e, StateAccHand handler)
        {
            if (e != null)
                handler?.Invoke(this, e);
        }
        
        protected virtual void OnOpened(AccountEvent e)
        {
            CallEvent(e, Opened);
        }
        
        protected virtual void OnWithdrawed(AccountEvent e)
        {
            CallEvent(e, Withdrawed);
        }
        
        protected virtual void OnAdded(AccountEvent e)
        {
            CallEvent(e, Added);
        }
        
        protected virtual void OnClosed(AccountEvent e)
        {
            CallEvent(e, Closed);
        }
        
        protected virtual void OnCalculated(AccountEvent e)
        {
            CallEvent(e, Calculated);
        }

        public virtual void PutMonney(decimal sum)
        {
            Sum += sum;
            OnAdded(new AccountEvent("into acc " + sum, sum));
        }
        
        public virtual decimal GetMonney(decimal sum)
        {
            decimal result = 0;
            if (Sum >= sum)
            {
                Sum -= sum;
                result = sum;
                OnWithdrawed(new AccountEvent($"summ {sum} get into acc {Id}", sum));
            }
            else
            {
                OnWithdrawed(new AccountEvent($"didnt have manney {Id}", 0));
            }
            return result;
        }

        protected internal virtual void Open()
        {
            OnOpened(new AccountEvent($"open ney acc: {Id}", Sum));
        }

        protected internal virtual void Close()
        {
            OnClosed(new AccountEvent($"acc {Id} closed.  itog: {Sum}", Sum));
        }

        protected internal void IncrementDays()
        {
            _days++;
        }

        protected internal virtual void Calculate()
        {
            decimal increment = Sum * Percentage / 100;
            Sum = Sum + increment;
            OnCalculated(new AccountEvent($"put procentage: {increment}", increment));
        }
    }
    
    public interface IAC
    {
        void PutMonney(decimal sum);
        decimal GetMonney(decimal sum);
    }

    class Program
    {

        static void Main(string[] args)

        {
            Bank<Account> bank = new Bank<Account>("mtbank");
            bool alive = true;
            while (alive)
            {

                Console.WriteLine("1.open");
                Console.WriteLine("2.Get monney");
                Console.WriteLine("3.Put monney");
                Console.WriteLine("4.Close account ");
                Console.WriteLine("5.Days-");
                Console.WriteLine("6.Info");
                Console.WriteLine("7.sort by value");
                Console.WriteLine("8.Exit");
                Console.WriteLine("Chose your act:");
                try
                {
                    int command = Convert.ToInt32(Console.ReadLine());
                    switch (command)
                    {
                        case 1:
                            OpenAccount(bank);
                            break;
                        case 2:
                            Withdraw(bank);
                            break;
                            break;
                        case 3:
                            PutMonney(bank);
                            break;
                        case 4:
                            CloseAccount(bank);
                            break;
                        case 5:
                            break;
                        case 6:
                          //  Find(bank);
                            break;
                        case 7:
                       //     SortByComparer(bank);
                            break;
                        case 8:
                            alive = false;
                            continue;
                    }
                    bank.CalculatePercentage();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
              
            }
        }

        private static void OpenAccount(Bank<Account> bank)
        {
            Console.WriteLine("summ:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("depp");
            Tepe Tepe;
            int type = Convert.ToInt32(Console.ReadLine());
            if (type == 2)
                Tepe = Tepe.Deposit;
            else
                Tepe = Tepe.Ordinary;
            bank.Open(Tepe,
                sum,
                AddSumHandler,  
                WithdrawSumHandler, 
                (o, e) => Console.WriteLine(e.Message), 
                CloseAccountHandler, 
                OpenAccountHandler); 
        }

        private static void Withdraw(Bank<Account> bank)
        {
            Console.WriteLine("summ:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("id:");
            int id = Convert.ToInt32(Console.ReadLine());

            bank.Getting(sum, id);
        }

        private static void PutMonney(Bank<Account> bank)
        {
            Console.WriteLine("summ, put:");
            decimal sum = Convert.ToDecimal(Console.ReadLine());
            Console.WriteLine("id:");
            int id = Convert.ToInt32(Console.ReadLine());
            bank.Put(sum, id);
        }

        private static void CloseAccount(Bank<Account> bank)
        {
            Console.WriteLine("id:");
            int id = Convert.ToInt32(Console.ReadLine());

            bank.Close(id);
        }        
        
        private static void OpenAccountHandler(object sender, AccountEvent e)
        {
            Console.WriteLine(e.Message);
        }     
        
        private static void AddSumHandler(object sender, AccountEvent e)
        {
            Console.WriteLine(e.Message);
        }
        
        private static void WithdrawSumHandler(object sender, AccountEvent e)
        {
            Console.WriteLine(e.Message);
            if (e.Sum > 0)
                Console.WriteLine("ttttt");
        }
        
        private static void CloseAccountHandler(object sender, AccountEvent e)
        {
            Console.WriteLine(e.Message);
        }

    }

}

